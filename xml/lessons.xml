<?xml version="1.0"?>
<lessons>
    <lesson id="1" name="Introduction">
        <topic id="1">
            <title>What is PHP?</title>
            <content>
            <![CDATA[What is PHP?
                The term <b>PHP</b> stands for <b>Hypertext Preprocessor</b> (it was called Personal Home Page before) is 
                a widely-used open source general-purpose scripting language that is especially suited for 
                web development and can be embedded into HTML.
                <br/>PHP Language Structure

                <img src="../massets/images/sample.png" alt="...">

                <br/><b><i>Did you know?</i></b>
                <br/><br/>A PHP file also has the ability to contain HTML tags and include client-side scripts like JavaScript.
                In contrast to programming languages like C or Perl that require a lot of commands to 
                output HTML, PHP allows you to embed code directly into HTML pages. This means that you 
                can create dynamic web pages without needing to write lots of code. The PHP code is 
                enclosed within special start and end processing instructions <?php and ?>, which allow you 
                to easily switch in and out of PHP mode as needed.
                The second example provided demonstrates that HTML elements can be included within 
                PHP code by echoing them as strings. This allows for the integration of HTML tags, such as the 
                <p> tag, within PHP scripts.

                <img src="../massets/images/sample.png" alt="...">
                
                Furthermore, it is possible to create PHP files that do not contain any HTML tags at all. These 
                files, referred to as pure PHP files, solely consist of PHP code without any accompanying HTML markup.
            ]]>
            </content>
        </topic>
    </lesson>
    <lesson id="2" name="Basic Syntax">
        <topic id="1">
            <title>PHP Tags</title>
            <content>
            <![CDATA[
                PHP parses a file by searching for specific opening and closing tags, <?php and ?>, 
                respectively. These tags indicate to PHP where to begin and end interpreting the code within 
                them. This parsing approach enables PHP to be embedded within various types of 
                documents since any content outside the opening and closing tags is disregarded by the 
                PHP parser. These type of tags are called delimiters. 

                <img src="../massets/images/sample.png" alt="...">

                Additionally, PHP provides a shorter alternative to the standard <?php echo statement, 
                known as <?=, which serves as a shorthand for the longer version.
            ]]>
            </content>
        </topic>
        <topic id="2">
            <title>PHP Comment Tag</title>
            <content>
            <![CDATA[
                A PHP comment tag is used in a single or multiple lines so that those inside the comment tag 
                would not be read and executed. It is used so that the programmers and the testers could 
                easily read and navigate the code for checking and improvements.
                There are ways to comment in PHP
                Single Line:
                <img src="../massets/images/sample.png" alt="...">
                Multiple Line:
                <img src="../massets/images/sample.png" alt="...">

            ]]>
            </content>
        </topic>
        <topic id="3">
            <title>Code Cohabitation</title>
            <content>
            <![CDATA[
                Your file consisted of three chunks of PHP code, each of which has printed some HTML text. 
                In this section, you'll create a script that has PHP code stuck in the middle of your HTML, and 
                you'll learn how these codes can peacefully coexist.
                1. Create a new HTML file in any text editor.
                2. Input the HTML below:
                <img src="../massets/images/sample.png" alt="...">
                3. Type the following PHP code:
                <img src="../massets/images/sample.png" alt="...">
                4. Add the closing tag of the HTML so that the document is valid:
                <img src="../massets/images/sample.png" alt="...">
                5. Save the file with the name “My First Cohabitation Tryout.php”.
                <img src="../massets/images/sample.png" alt="...">
                6. Put this file in the document root of the webserver.
                Remember!
                Choose PHP as your type of file, use ".php" as file extension name.
            ]]>
            </content>
        </topic>
        <topic id="4">
            <title>PHP Variables, Constants, and Superglobal Variables</title>
            <content>
            <![CDATA[
                    <b>PHP Variables</b>
                    Variable may be a symbol or name that stands for a value. Variables are utilized
                for putting away values such as characters, numeric values, character strings, or
                memory addresses so that they can be utilized in any portion of the program.
                Declare PHP Variables
                    Variables in PHP must start with a $ (dollar sign) taken after by the name of
                the variable.
                    A substantial variable name begins with a letter (A-Z, a-z) or emphasizes by an
                underscore (_), taken after by letters, numbers, or underscores. On the off chance that
                a variable title is more than one word, it can be isolated with an underscore (for the
                case $employee_code rather than $employeecode). A '$' is an extraordinary variable
                that cannot be assigned.

                <img src="../massets/images/sample.png" alt="...">

                On the example above, the declared variables are $text, $number, and $name.
                Remember:
                Variable names are case-sensitive ($age and $AGE are two different variables).
            ]]>
            </content>
        </topic>
        <topic id="5">
            <title>PHP Constants</title>
            <content>
            <![CDATA[
                    A constant (name) is an identifier for a primary value. The value cannot be adjusted amid
                the script's execution. A substantial constant name begins with a letter or underscores with
                no dollar sign ($) before the name) and by constant identifiers are always in an uppercase
                form. Constants are characterized by utilizing the define() function or by utilizing the const
                keyword outside a course definition as of PHP. The constant’s name and value must be set
                inside the () parentheses. After characterizing, it can never be changed or indistinct. As it
                were, scalar information, i.e., Boolean, numbers, float, and string, can be contained in
                constants.
                In creating a constant, use the function define().
                define(name, value, case-insensitive)
                Where, name - indicates the name of the constant
                    value - indicates the value of the constant
                    case - insensitive - indicates whether the constant name ought to be
                    case-insensitive. The default is false.
                Creating a constant with a case – sensitive name:
                <img src="../massets/images/sample.png" alt="...">
                And creating a constant with a case – insensitive name:
                <img src="../massets/images/sample.png" alt="...">
                <br/><b><i>Did you know?</i></b>
                PHP constants are global, and it can be utilized in the entire script.
            ]]>
            </content>
        </topic>
        <topic id="6">
            <title>PHP Superglobal Variables</title>
            <content>
            <![CDATA[
                    $GLOBALS is one of the PHP superglobal variables where can be used
                instead of the 'global' keyword to access variables from global scope, the variables
                which can be accessed from anywhere in a PHP script, even within functions.
                A few predefined variables in PHP are "superglobals," which implies that they
                are continuously available, regardless of scope, and you'll be able to get to them from
                any function, class, or file without having to do anything extraordinary. PHP inserts all global
                variables in an object called $GLOBALS. The index of $GLOBAS holds the name of the
                variable.
                Example:
                <img src="../massets/images/sample.png" alt="...">
                In the example, since z is a variable present in $GLOBALS array, it is also accessible
                from outside the function!
            ]]>
            </content>
        </topic>
        <topic id="7">
            <title>PHP Operators</title>
            <content>
            <![CDATA[
                    An operator is somewhat taking one or more values in programming language
                and yields another value so that the development itself gets to be an expression.
                Operators can be gathered base on the number of values they take. Unary operators take
                as it were one value, to illustrate '!' (the logical not operator) or '++' (the increment operator).
                The binary operators take two values, such as the commonplace arithmetical operators +
                (plus) and - (minus), and the larger part of PHP operators drop into this category. At last,
                there's a single ternary operator.?, which takes three values; this can be ordinarily alluded to
                basically as "the ternary operator" (even though it might be more legitimately be called the
                conditional operator).
                PHP Operators are utilized to perform various operations on variables and values.
                PHP partitions the operators within the following:
                1. Arithmetic Operators
                2. Assignment Operators
                3. Comparison Operators
                4. Increment or Decrement Operators
                5. String Operators
                6. Logical Operators
                7. Array Operators
                8. Conditional Assignment Operators
            ]]>
            </content>
           </topic>
        <topic id="8">
            <title>PHP Arithmetic Operators</title>
            <content>
            <![CDATA[
                    PHP arithmetic operators are utilized with numeric values to perform various arithmetical
                operations, like addition, subtraction, etc. Remember the basic arithmetic from your school?
                These work just like those.
                <img src="../massets/images/sample.png" alt="...">
                    The division operator ("/") outputs a float value unless the two operands are integers or
                strings that get changed over to integers, and the numbers are evenly divisible, wherein
                case the value of a number will be returned. For numbers division, see intdiv().
                The operand of modulo is changed over to integers (by stripping the decimal
                portion) before handling. The output of the modulo operator will have the same sign
                as the profit — the output of $a % $b will have the same sign as $a.
                Example:
                <img src="../massets/images/sample.png" alt="...">
            ]]>
            </content>
           </topic>
        <topic id="9">
            <title>PHP Assignment Operators</title>
            <content>
            <![CDATA[
                    The assignment operator is "=". Your first disposition may be to think of this as "equal to". Do
                not. It indeed implies that the left operand gets set to the value of the expression on the
                proper (that's, "gets set to").
                The value of an assignment operator is the value assigned. That's the value of "$a = 3"
                is 3. It permits you to do a few dangerous things.
                Example:
                <img src="../massets/images/sample.png" alt="...">
                    In expansion to the essential assignment operator, there are "combined operators" for
                all binary arithmetic, array union, and string operators that permit you to utilize a value in an
                expression and, after that, set its value to the result of that expression.
                Example:
                <img src="../massets/images/sample.png" alt="...">
                    Note that the assignment duplicates the first variable to the modern one (assignment
                by value), so changes to one will not influence the other. It may also have significance in
                case you wish to duplicate something like a vast array inside a tight loop.
                A particular case to the regular assignment by value conduct inside PHP
                happens with objects, which are assigned by reference. Objects may be expressly
                replicated through the clone keyword.
                Assignment by reference is supported utilizing the "$var = &$othervar;" language
                structure. Assignment by reference implies that both variables conclusion indicating at the
                same information, and nothing is replicated anywhere.
                PHP partitions the following operators below. We already discussed the
                arithmetic and assignment operators. Now, we will discuss the other operators:
                ● Comparison operators
                ● Increment/Decrement operators
                ● Logical operators
                ● String operators
                ● Array operators
                ● Conditional assignment operators
            ]]>
            </content>
           </topic>
        <topic id="10">
            <title>PHP Comparison Operators</title>
            <content>
            <![CDATA[
                    Comparison operators in PHP allow you to compare two different or equal
                values. Here are some examples of various comparisons, as shown below.
                <img src="../massets/images/sample.png" alt="...">
                    In case you compare a number with a string, or the comparison includes
                numerical strings, at that point, each string is changed over to a number, and the
                comparison performed numerically. These rules, moreover, apply to the switch
                articulation. The sort transformation does not take put when the comparison is === or !== as
                these include comparing the sort as well as the value.
            ]]>
            </content>
           </topic>
        <topic id="11">
            <title>PHP Incrementing or Decrementing Operators</title>
            <content>
            <![CDATA[
                    C-style pre- and post-increment and decrement operators are supported in
                PHP.
                Remember!
                The increment or decrement operators, as it were, affect numbers and strings. Arrays,
                objects, Boolean, and resources are not affected. Decrementing Invalid or NULL values have
                no impact as well, but increasing them results in 1.
                <img src="../massets/images/sample.png" alt="...">
            ]]>
            </content>
           </topic>
        <topic id="12">
            <title>PHP Logical Operators</title>
            <content>
            <![CDATA[
                    Logical operators are utilized to combine two conditional statements.
                    <img src="../massets/images/sample.png" alt="...">
            ]]>
            </content>
           </topic>
        <topic id="13">
            <title>PHP String Operators</title>
            <content>
            <![CDATA[
                    PHP has two operators that are extraordinarily outlined for strings. The
                    concatenation operator ('.') is the primary, which returns the concatenated value of its
                    right and left arguments. Next is the concatenating assignment operator ('.='), which
                    appends the value on the right to the value on the left side.
                    <img src="../massets/images/sample.png" alt="...">
            ]]>
            </content>
           </topic>
        <topic id="14">
            <title>PHP Array Operators</title>
            <content>
            <![CDATA[
                    A PHP Array Operators are utilized in comparing arrays.
                    <img src="../massets/images/sample.png" alt="...">
                    The + operator returns the right-hand array added to the left-hand array. For
                    keys that exist in both clusters, the components from the left-hand array will be utilized,
                    and the coordinating components from the right-hand array will be ignored.
                    ]]>
            </content>
           </topic>
    </lesson>
        <lesson id="3" name="PHP Conditional Loop Statements">
                <topic id="1">
                    <title>PHP Conditional Statements</title>
                    <content>
                    <![CDATA[
                        Like most programming languages, PHP permits you to input in code that
                    performs various actions according to the results of logical or comparative test
                    conditions at run-time. It implies you'll make test conditions within the form of
                    expressions that assesses to either correct or wrong and based on these results, and
                    you'll perform specific actions.
                    Below are the statements in PHP that you can use to make decisions:
                    ●The if statement
                    ●The if...else statement
                    ●The if...elseif....else statement
                    ●The switch case statement
                    ]]>
                    </content>
                </topic>
            <topic id="2">
                    <title>The if Statements</title>
                    <content>
                    <![CDATA[
                        The if statement is utilized to execute a piece of code only if the specified condition
                    assesses to be correct. It is the basic PHP's conditional statements and can be written in:
                    <img src="../massets/images/sample.png" alt="...">
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="3">
                    <title>The if...else Statement</title>
                    <content>
                    <![CDATA[
                        You can enhance the decision-making process by giving a choice through
                    including an else statement to the if statement. The if...else statement permits you to
                    execute one piece of code if the required condition is assessing to be true and another
                    piece of code if it is assessing to be untrue. It can be composed, like this:
                    <img src="../massets/images/sample.png" alt="...">
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    The illustration below will display "Have a nice weekend!" if the current day
                    is Friday, something else will display "Have a nice day!"
                    ]]>
                    </content>
                </topic>
            <topic id="4">
                    <title>The if...elseif...else Statement</title>
                    <content>
                    <![CDATA[
                        The if...elseif...else is a statement that is utilized to combine numerous if...else
                    statements.\
                    <img src="../massets/images/sample.png" alt="...">
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    The figure illustrates that it will display "Have a nice weekend!" if it is Friday, and "Have a
                nice Sunday!" if it is Sunday, or else it will display "Have a nice day!"
                    ]]>
                    </content>
                </topic>
            <topic id="5">
                    <title>Switch Statements</title>
                    <content>
                    <![CDATA[
                        Switch statement is utilized to perform various actions based on different conditions. A
                    switch statement will look like this:
                    <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="6">
                    <title>If...Else Vs. Switch Statement</title>
                    <content>
                    <![CDATA[
                        The switch statement is another approach to the if-else if-else statement, which does
                    nearly the same thing. The switch statement tests a variable against an arrangement of
                    values until it finds a match, and after that, it executes the code comparing to that match.
                    <img src="../massets/images/sample.png" alt="...">
                    The example above shows how we can use the switch statement to display
                    different messages for each day.
                    ]]>
                    </content>
                </topic>
            <topic id="7">
                    <title>Loop Statements</title>
                    <content>
                    <![CDATA[
                        The switch statement is another approach to the if-else if-else statement, which does
                    nearly the same thing. The switch statement tests a variable against an arrangement of
                    values until it finds a match, and after that, it executes the code comparing to that match.
                    <img src="../massets/images/sample.png" alt="...">
                    The example above shows how we can use the switch statement to display
                    different messages for each day.

                        Loops are utilized to execute a piece of code once more and more, as long as
                    a particular condition is reached. The essential thought behind a loop is to automate
                    the repetitive errands inside a program to save time and exertion. PHP supports four
                    distinctive sorts of loops.
                    1. FOR - loops through a piece of code until the counter comes to an indicated
                    number
                    2. WHILE - loops through a piece of code as long as the condition indicated is
                    assessed to be correct.
                    3. DO...WHILE - the piece of code executed once after that condition is assessed.
                    If the condition is correct, the statement is repeated as long as the indicated
                    condition is correct.
                    4. FOREACH - loops through a piece of code for each element in an array.
                    You may learn how to loop through the values of array utilizing the foreach() loop
                    at the end of this lesson. The foreach() loop works mainly with arrays.
                    ]]>
                    </content>
                </topic>
            <topic id="8">
                    <title>The For Loop Statement</title>
                    <content>
                    <![CDATA[
                        The for loop repeats the piece of code as long as a particular condition is
                    reached. It is regularly utilized to execute a piece of code for a certain number of times.
                    <img src="../massets/images/sample.png" alt="...">

                    The parameters for the "for loop" have the following interpretations:

                    • the initialization — assign to initialize the counter variables and assessed once
                    unconditionally before the first execution of the body of the loop.
                    • The condition — within the starting of each iteration, the condition is assessed. On the
                    off chance that it assesses to be true, the loop proceeds, and the nested statements are
                    executed. If it assesses to be wrong, the execution of the loop will end.
                    • The afterthought — changes the loop counter with a new value. It assesses at the end
                    of each iteration.
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    Output:
                    <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="9">
                    <title>The While Loop Statement</title>
                    <content>
                    <![CDATA[
                       The while statement iterates through a block of a statement as long as the
                    condition specified evaluates to be true.
                    <img src="../massets/images/sample.png" alt="...">
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    Output:
                    <img src="../massets/images/sample.png" alt="...">
                        The case above characterizes a loop that begins with $i=1. The loop will proceed to
                    run while $i is less than or the same to 3. The $i will increment by 1 each time the loop runs.
                    ]]>
                    </content>
                </topic>
            <topic id="10">
                    <title>The Do While Loop Statement</title>
                    <content>
                    <![CDATA[
                       The do-while loop could be a variation of the while loop, which assesses the condition
                    at the end of each loop cycle. With a do-while loop, the block of code is executed once,
                    and after that, the condition is assessed. If the condition is correct, the statement is repeated
                    as long as the specified condition is assessed to be correct.
                    <img src="../massets/images/sample.png" alt="...">
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    Output:
                    <img src="../massets/images/sample.png" alt="...">
                        The example defines a loop that begins at $i=1. It will then increment $i with 1,
                    and display the output. Then the condition is assessed, then the loop will continue to
                    run as long as $i is less than or can equal to 3.
                    ]]>
                    </content>
                </topic>
            <topic id="11">
                    <title>The Difference of both while and do while loop</title>
                    <content>
                    <![CDATA[
                       The while loop is different from the do-while loop in one specific reason; in a while loop,
                    the condition to be assessed is tested at the start of each loop iteration, so if the conditional
                    expression is assessed to be false, the loop will never be executed.

                        However, in a do-while loop, the loop will be executed once, even if the conditional
                    expression is false because the condition is assessed at the end of the loop iteration instead
                    of from the start.

                    <b><i>Remember:</b></i>
                        Do while loop will continue to execute the code once, then it will assess the condition
                    and repeat the loop while the indicated condition is correct.
                    ]]>
                    </content>
                </topic>
            <topic id="12">
                    <title>For Each Loop Statement</title>
                    <content>
                    <![CDATA[
                       The foreach loop is utilized to iterate over objects or arrays.
                       <img src="../massets/images/sample.png" alt="...">
                       Or
                       <img src="../massets/images/sample.png" alt="...">
                       Example:
                       <img src="../massets/images/sample.png" alt="...">
                       OutputL
                       <img src="../massets/images/sample.png" alt="...">
                            The example above demonstrates a loop that will print the values of the given
                        array.
                       Example:
                       <img src="../massets/images/sample.png" alt="...">
                       Output:
                       <img src="../massets/images/sample.png" alt="...">
                            The example above shows a foreach loop that iterates on a key-value pair of
                        the array $colors
                        ]]>
                    </content>
                </topic>
                
    </lesson>
                <lesson id="4" name="Manipulating PHP Strings and Arrays">
                <topic id="1">
                    <title>Strings in PHP</title>
                    <content>
                    <![CDATA[
                        A PHP string may be a sequence of special characters and arithmetic values or a
                    combination of all like letters and numbers. The best way to compose a string is to encase
                    the string exacting (i.e., string characters) in single citation marks ( ' ) like this:
                    <img src="../massets/images/sample.png" alt="...">
                        You can utilize double quotation marks ( " ), be that as it may, single and, double
                    quotation marks work completely in different ways. Strings encased in single-quotes
                    are treated nearly actually. However, the strings delimited by the double quotes
                    replace variables with the string representations of their values (called interpolation)
                    as well as specially interpreting certain escape sequences.
                    The escape sequence utilizes:
                    • \n is utilized by a newline character
                    • \r is utilized by the carriage-return character
                    • \t is utilized by the tab character
                    • \$ is utilized by the dollar sign itself ( $ )
                    • \" is utilized by a single double-quote ( " )
                    • \\ is utilized by a single backslash(\)
                    Example: 
                    <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="2">
                    <title>Strings Methods and Properties</title>
                    <content>
                    <![CDATA[
                        PHP has many built-in functions for controlling strings like calculating the length of a
                    string, discover sub-strings or characters, replacing a portion of a string with diverse
                    characters, take a string separated, and many more. Here are the illustrations of a few of
                    these functions.
                    ]]>
                    </content>
                </topic>
            <topic id="3">
                    <title>Calculating the Length of a String</title>
                    <content>
                    <![CDATA[
                        The strlen() function utilizes the calculation of the number of characters within
                    a string. It includes the blank spaces inside the string.
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="4">
                    <title>Counting Number of Words in a String</title>
                    <content>
                    <![CDATA[
                        Using the str_word_count() function, it will count the number of words within
                    a string.
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="5">
                    <title>Replace a Text inside Strings</title>
                    <content>
                    <![CDATA[
                        The str_replace() code is used to replace all occurrences of the text searched
                    within the target string.
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    <b><i>Tips and Tricks</b></i>
                        The str_replace() method is case sensitive, meaning it will replace all occurrences of a
                    direct comparison. In case you need to change a few contents in your string while ignoring
                    case sensitivity, use the str_ireplace() method. Their arguments are the same.
                    ]]>
                    </content>
                </topic>
            <topic id="6">
                    <title>Reversing a String</title>
                    <content>
                    <![CDATA[
                        The strrev() function reverses a string.
                        <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="7">
                    <title>Converting a String to an Array</title>
                    <content>
                    <![CDATA[
                        The explode() method converts a string to an array. Syntax of explode is: explode(delimiter,
                    string)
                    <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="8">
                    <title>Knowing the Position in a String</title>
                    <content>
                    <![CDATA[
                        The strpos() method returns the position of the string if it is found on the given haystack.
                    Syntax of strpos() is: strpos(haystack, needle)
                    <b><i>Remember</b></i>
                    If the string is not found, the output of strpos() is FALSE. The string position starts at 0, not 1.
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="9">
                    <title>Arrays in PHP</title>
                    <content>
                    <![CDATA[
                         Arrays in PHP are a kind of data structure that permits to store different elements of
                    distinctive data types beneath a single variable in this manner, saving the exertion of
                    composing a different variable for each data. Arrays are used to create a list of elements of
                    distinctive types, which can be gotten to utilizing their index or key.

                        Assume that we need to store five names and display them in like manner. It
                    could be effortlessly done by the utilize of five different string variables. What if rather
                    than five, the number rises to a hundred? At that point, it would be truly difficult for the
                    user or developer to create multiple distinctive variables. Here, array comes into play
                    and makes a difference to store each element inside a single variable and permits an
                    easy access in utilizing an index or a key. An array is made using an array() function
                    in PHP or by enclosing the values within brackets ( [ ] ). A list of items (a list of color
                    names, for example), storing the colors per variable may look like this:
                    <img src="../massets/images/sample.png" alt="...">
                    Using an Array, it will only look like this:
                    <img src="../massets/images/sample.png" alt="...">

                    In PHP, there are three classifications of arrays:
                    1. Indexed Arrays - An array with a numeric file where values are put away linearly.
                    2. Associative Arrays - An array with a string list where rather than straight storage, each
                    value can be allotted a particular key.
                    3. Multi-dimensional Arrays - An Array which contains single or numerous Arrays inside it and
                    can be gotten to using numerous indices

                    <b>Indexed Arrays</b>
                        An indexed or numeric array stores each array element with a numeric index.
                        <img src="../massets/images/sample.png" alt="...">
                        <i>Remember</i>
                        In an indexed array, the indexes are assigned automatically, start with 0, and the values
                        can be of any data type

                        <b>Associative Arrays</b>
                            In an associative array, the keys allotted to the values can be self-assertive and userdefined strings. Within the following case, the array uses keys rather than index numbers.
                            There are ways to create an associative array:
                            <img src="../massets/images/sample.png" alt="...">
                            Or
                            <img src="../massets/images/sample.png" alt="...">
                            The name keys can be used in code:
                            <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="10">
                    <title>Multi-dimensional Arrays</title>
                    <content>
                    <![CDATA[
                            A multi-dimensional array is an array wherein it contains one or more arrays.
                        PHP supports multi-dimensional arrays that are two or more levels profound. However,
                        arrays more than three levels profound are difficult to oversee for most individuals.

                        <i>Remember</i>
                        The dimension of an array shows the number of indices you need to choose from an
                        element. For a two-dimensional array, you need two indices to choose from an element. For
                        a three-dimensional array, you need three indices to choose from an element.
                    ]]>
                    </content>
                </topic>
            <topic id="11">
                    <title>Two-dimensional Arrays</title>
                    <content>
                    <![CDATA[
                            A two-dimensional array is an array with other arrays (while a three-dimensional
                        array is an array with more than two arrays).
                         Take a look at the table below:
                         <img src="../massets/images/sample.png" alt="...">
                          We can exert the information from the above table in a two-dimensional array.
                          <img src="../massets/images/sample.png" alt="...">

                           Now the two-dimensional $color array is containing four arrays that have two
                        indices: the row and the column. To take access to the elements of the $color array,
                        we must point to the two indices (row and column).
                        Example:
                        <img src="../massets/images/sample.png" alt="...">
                            We can also use a foreach loop inside another foreach loop to get the elements
                        of the $color array. Using a foreach loop in an array gives us more advantage to iterate
                        within the contents, even without specifying the indices. Let us use foreach loops to
                        display our contents in an HTML table.
                        Example:
                        <img src="../massets/images/sample.png" alt="...">
                        Output:
                        <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                    </topic>
            <topic id="12">
                    <title>Array Methods and Properties</title>
                    <content>
                    <![CDATA[
                            <b>Counting Array Elements</b>
                        The count() property counts all the elements in an array. Syntax of count() is:
                        count(array)
                        Example:
                        <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="13">
                    <title>Converting an Array to a String</title>
                    <content>
                    <![CDATA[
                             The implode() method converts an array to a string. Syntax of implode() is:
                        implode(glue, pieces)
                        Example:
                        <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="14">
                    <title>Shuffling an Array</title>
                    <content>
                    <![CDATA[
                             The shuffle() method shuffles all the elements in an array. Syntax of shuffle()
                        is: shuffle(array)
                        Example:
                        <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="15">
                    <title>Sorting an Array</title>
                    <content>
                    <![CDATA[
                             The sort() method sorts an array. Syntax of sort() is: sort(array)
                             Example:
                             <img src="../massets/images/sample.png" alt="...">

                    <text>Lesson 4 Quiz</text>
                    <quiz>
                    <question>
                        <text>An array with a numeric file where values are put away linearly.</text>
                        <options>
                            <option>Multi-Dimensional Array</option>
                            <option>Associative Array</option>
                            <option>Indexed Array</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>An array with a string list where rather than straight storage, each value can be
allotted a particular key</text>
                        <options>
                            <option>Multi-Dimensional Array</option>
                            <option>Associative Array</option>
                            <option>Indexed Array</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>An Array which contains single or numerous Arrays inside it and can be gotten to using
numerous indices</text>
                        <options>
                            <option>Multi-Dimensional Array</option>
                            <option>Associative Array</option>
                            <option>Indexed Array</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What kind of array is this?<br> $colors = ["Blue", "Yellow", "Red"];</text>
                        <options>
                            <option>Multi-Dimensional Array</option>
                            <option>Associative Array</option>
                            <option>Indexed Array</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What kind of array is this?<br> $colors = array ("Blue", "Yellow", "Red");</text>
                        <options>
                            <option>Multi-Dimensional Array</option>
                            <option>Associative Array</option>
                            <option>Indexed Array</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What kind of Array is this?<br> $color = array("Apple"=>"Red", "Banana"=>"Yellow", "Watermelon"=>"Green");</text>
                        <options>
                            <option>Multi-Dimensional Array</option>
                            <option>Associative Array</option>
                            <option>Indexed Array</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What kind of Array is this?<br> $color = [<br> "Apple"=>"Red",<br> "Banana"=>"Yellow",<br> "Watermelon"=>"Green"<br> ];</text>
                        <options>
                            <option>Multi-Dimensional Array</option>
                            <option>Associative Array</option>
                            <option>Indexed Array</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What kind of Array is this?
                            <br>$color = array(
                            <br>array("Red",Apple,3),
                            <br>array("Yellow",Banana,7),
                            <br>array("Green",Watermelon,4),
                            <br>array("Purple",Grapes,19)
                            <br>);</text>
                        <options>
                            <option>Multi-Dimensional Array</option>
                            <option>Associative Array</option>
                            <option>Indexed Array</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What property is used to count Array elements?</text>
                        <options>
                            <option>implode()</option>
                            <option>count()</option>
                            <option>shuffle()</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What property is used to convert an array into a string?</text>
                        <options>
                            <option>implode()</option>
                            <option>count()</option>
                            <option>shuffle()</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What property is used to shuffle array contents?</text>
                        <options>
                            <option>implode()</option>
                            <option>count()</option>
                            <option>shuffle()</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What property is used to sort array contents?</text>
                        <options>
                            <option>implode()</option>
                            <option>count()</option>
                            <option>sort()</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What count does an array automatically start?</text>
                        <options>
                            <option>1</option>
                            <option>0</option>
                            <option>2</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Property used to count the length of a string</text>
                        <options>
                            <option>strlen()</option>
                            <option>length()</option>
                            <option>stringlen()</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What property is used to count words in a string?</text>
                        <options>
                            <option>word_string_count()</option>
                            <option>str_wrd_count()</option>
                            <option>str_word_count()</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    ]]>
                    </content>
                </topic>
            </lesson>
                <lesson id="5" name="Using Pre-Defined and Creating User-Defined Functions in PHP">
                <topic id="1">
                    <title>What are Functions</title>
                    <content>
                    <![CDATA[
                         A PHP function is a self-contained block of code that is used to perform a
                    specific task. It has a huge collection of built-in functions that you can call directly
                    within your PHP scripts to execute a specific task, like the date(), print_r(), mktime(),
                    var_dump, and many more.
                        When it comes to built-in functions, PHP also allows the programmers to define
                    their PHP functions. It could be a way to make reusable code bundles that perform
                    various tasks and can be stored and maintained separately by the main program.
                    <b><i>Remember</b></i>
                    A function must begin with a letter or maybe an underscore. Function names are NOT that
                    case-sensitive.
                    ]]>
                    </content>
                </topic>
            <topic id="2">
                    <title>Date and Time Functions</title>
                    <content>
                    <![CDATA[
                         <b>The Date() Function</b>
                    The PHP date() function creates a timestamp to a more lucid date and time outputs. PHP
                    Language structure of date() is: date(format, timestamp)

                    <i>Remember</i>
                    A timestamp is a grouping of characters, signifying the date and time at which a certain
                    occasion happened.

                    ]]>
                    </content>
                </topic>
            <topic id="3">
                    <title>Getting a Date</title>
                    <content>
                    <![CDATA[
                          The desired parameter of the date() function indicates how to arrange the date
                    or time. Here are a few characters that are commonly utilized for dates:
                    • d - is used for the day of the month (01 to 31)
                    • m - is used for a month (01 to 12)
                    • Y - is used for a year (in four digits)
                    • l (lowercase 'L') - is used for the day of the week
                    There are other characters like"/", ".", or "-" it can be embedded between the
                    characters to include extra formatting.
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="4">
                    <title>Getting the Time</title>
                    <content>
                    <![CDATA[
                    Here are a few characters that are commonly utilized for times:
                    • H - represents the 24-hour format of an hour (it's from 00 to 23)
                    • h - represents the 12-hour format of an hour ( from 01 to 12)
                    • i - represents minutes with driving zeros (00 to 59)
                    • s - represents seconds with driving zeros (00 to 59)
                    • a - Lowercase a represents ante meridiem and post meridiem (am or pm)
                    <img src="../massets/images/sample.png" alt="...">
                    <i>Remember</i>
                    PHP function for the date() will return from the current date and time of the server!
                    ]]>
                    </content>
                </topic>
            <topic id="5">
                    <title>Setting A Time Zone</title>
                    <content>
                    <![CDATA[
                        On the off chance that the time you got back from the code is not correct, it's
                    probably since your server is in another nation or set up for a diverse time zone. If you
                    would like the time to rectify concurring to a particular area, you'll set the time zone
                    you need to utilize.
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    <b>Create A Date Using mktime() function</b>
                        The timestamp parameter within the date() function indicates a timestamp. In
                        case overlooked, the current date and time will be utilized (as within the examples).
                        The PHP mktime() returns the Unix timestamp for a date. The Unix timestamp
                        encompasses the number of seconds between the Unix Age (January 1, 1970,
                        00:00:00 GMT) and the time indicated. The language structure of mktime() is:
                        mktime(hour, minute, second, month, day, year)
                        Example:
                        <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
            <topic id="6">
                    <title>Include and Require Functions</title>
                    <content>
                    <![CDATA[
                        PHP permits us to form different functions and different elements that are
                    utilized by numerous times on different pages. Scripting the same function in different
                    pages could be an errand of incredible exertion and would devour time. It could be
                    kept a strategic distance from if we take after and use the concept of file inclusion,
                    which makes a difference to include various files, including text and codes, into a single
                    file that saves the effort of composing the total function or code multiple times. It also
                    gives another advantage. If we need to alter any code at that point rather than altering
                    it in all the files, we just have to be compelled to edit the source record, and all codes
                    will be consequently changed.

                    PHP has two ways which help us to include files:
                    1. function include() - will only produce a warning (E_WARNING), and the
                    script will continue.
                    2. function require() - will produce a fatal error (E_COMPILE_ERROR) and
                    stop the script.

                    The basic language structure of the include() and require() statements can be
                    given with:
                    <img src="../massets/images/sample.png" alt="...">
                    <i>Tips and Tricks</i>
                    Just like print and echo statements, you can exclude the parentheses while utilizing the
                    include and require functions
                    ]]>
                    </content>
                </topic>
            <topic id="7">
                    <title>The include() Function</title>
                    <content>
                    <![CDATA[
                        This function is utilized to duplicate all the data of a record called within the
                    function, content shrewd into a file from which it is called. It happens before the server
                    executes the block of code. The following illustration will illustrate how to include the
                    common header, footer, and menu codes, which are put away in separate
                    'header.php,' 'footer.php,' and 'menu.php' files individually, within all the pages of your
                    site. Utilizing this strategy, you'll be able to update all pages of the site at once by
                    doing the changes to just a sole file, this saves a lot of monotonous work.
                    ]]>
                    </content>
                </topic>
            <topic id="8">
                    <title>Comparing include() function and require() function</title>
                    <content>
                    <![CDATA[
                        You may be guessing if we can include files using the include() function and
                    why we should need to use the require() function. Typically the require() function
                    operates just like the include().
                    The only distinction is, the include() function will only produce a PHP warning
                    but permit script execution to proceed if the file to be included is not found. At the same
                    time, the require() function will create a fatal error and stops the script execution.

                    <i>Tips and Tricks</i>
                    It is suggested to use the require() function if you're including the library files or files
                    containing the functions and configuration variables that are fundamental for running your
                    application, such as database setup file.
                    ]]>
                    </content>
                </topic>
            <topic id="9">
                    <title>Using include_once() and require_once()</title>
                    <content>
                    <![CDATA[
                        In case you inadvertently include the same file more than one time within your
                    code using the include or require functions, it may cause crashes. To avoid this
                    circumstance, PHP gives include_once and require_once statements. These
                    statements carry on within the same way as to include and require functions with one
                    exception.
                    ]]>
                    </content>
                </topic>
            <topic id="10">
                    <title>Creating a Calling User-Defined Functions</title>
                    <content>
                    <![CDATA[
                        Other than built-in PHP functions, it's possible to create your functions.
                    • A PHP function is a block or piece of statements that can be used multiple
                    times in a program.
                    • A PHP function does not execute systematically when a page loads.
                    • A PHP function will be executed by calling it.
                    ]]>
                    </content>
                </topic>
            <topic id="11">
                    <title>Creating a User-defined Function</title>
                    <content>
                    <![CDATA[
                        In declaring a PHP user-defined function the declaration must begin with the
                    word function. Language Structure of a function is:
                    <img src="../massets/images/sample.png" alt="...">
                    <i>Remember</i>
                    Always remember that a PHP function name must begin with a letter or an underscore. PHP
                    Function names are NOT that case-sensitive.

                    In the given example below, we compose a function named "writeMsg()". The
                    opening brachet( { ) specifies the start of the function code, and the closing brachet
                    ( } ) specifies the ending of the function.

                    The function displays "Hello world!" To call a function, just simply write its
                    function name followed by parentheses(()).
                    <img src="../massets/images/sample.png" alt="...">

                        PHP functions are not that much different from other programming languages. A function is
                    a piece or block of code that takes one or more input in the form of a parameter and
                    makes some processing and then returns a value.

                    There are two partitions which must be clear to you:

                    1. Creating a Function – It is very helpful to make your PHP function. Assume that you
                    need a PHP function that can write a simple message on the browser after you call it.
                    The following example defines the writeMsg() function and calls it after its creation.

                    2. Calling a Function – In reality, you hardly got to create your PHP function since there
                    are now more than 1000 built-in library functions created for adiverse range, and you
                    just have to call them according to what you want.

                    <i>Tips and Tricks</i>
                    Give your function a name that represents what the function does!
                    ]]>
                    </content>
                </topic>
            <topic id="12">
                    <title>Functions with Arguments</title>
                    <content>
                    <![CDATA[
                        In PHP, an argument is like a variable. All the information can be passed to a
                    function using these so-called Arguments. Arguments are indicated after the function
                    name inside the open and close parentheses. You can add many arguments as many
                    as you need but remember to separate them with a comma.
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                        The example above has a function with one argument ($fruits). When the color() function
                    is called, it passes along a fruit (e.g., Apple), and the $fruits variable is used inside the
                    function, which outputs several different fruits, but the same color.
                    <img src="../massets/images/sample.png" alt="...">
                    This next example has a function with two arguments ($fruits and $price).
                    ]]>
                    </content>
                </topic>
            <topic id="13">
                    <title>PHP Function Return Values</title>
                    <content>
                    <![CDATA[
                        The return statement permits a function to return a value to its caller. To create
                    functions with return values, add the return statement at your function.

                    <i>Remember</i>
                    Once your function encountered the return statement, any code or script below the return
                    statement will no longer be executed. Position your return statement wisely in your scripts.

                    PHP also supports Type Declarations for the return statement. Same with type
                    declaration in function arguments, by enabling the strict requirement, it will display a
                    "Fatal Error" on a type mismatch.

                    To declare a type for return function, remember to add a colon ( : ) and the
                    type right before the opening brace ( { ) when declaring function.

                    <text>Lesson 5 Quiz</text>
                    <quiz>
                    <question>
                        <text>A self-contained block of code that is used to execute a specific task.</text>
                        <options>
                            <option>Constants</option>
                            <option>Function</option>
                            <option>Variable</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>A function creates a timestamp to a more lucid date and time outputs.</text>
                        <options>
                            <option>Date and Time()</option>
                            <option>Date&Time()</option>
                            <option>Date()</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>The “d” character is used in the date function to get?</text>
                        <options>
                            <option>Week of the Month</option>
                            <option>Month</option>
                            <option>Day of the Month</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>The “m” character is used in the date function to get?</text>
                        <options>
                            <option>Day</option>
                            <option>Month</option>
                            <option>Year</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>The “Y” character is used in the date function to get?</text>
                        <options>
                            <option>Day</option>
                            <option>Month</option>
                            <option>Year</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>will only produce a warning (E_WARNING), and the script will continue.</text>
                        <options>
                            <option>include()</option>
                            <option>require()</option>
                            <option>inquire()</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>will produce a fatal error (E_COMPILE_ERROR) and stop the script.</text>
                        <options>
                            <option>include()</option>
                            <option>require()</option>
                            <option>inquire()</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the Unix timestamp for a date?</text>
                        <options>
                            <option>Mktime()</option>
                            <option>mktime()</option>
                            <option>MKTIME()</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>When is using the require function suggested?</text>
                        <options>
                            <option>When you feel like it</option>
                            <option>When including library files</option>
                            <option>When it seems to fit</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What happens to the lines of code below the return() statement?</text>
                        <options>
                            <option>Would be displayed as an output</option>
                            <option>Won’t be executed</option>
                            <option>Would be prioritized</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>PHP also supports _______ for the return statement</text>
                        <options>
                            <option>Type Reclamation</option>
                            <option>Type Declamation</option>
                            <option>Type Declaration</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Can you make a function with arguments in PHP?</text>
                        <options>
                            <option>Yes</option>
                            <option>No</option>
                            <option>Maybe</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the best way to name your functions?</text>
                        <options>
                            <option>Name it to represent what it does</option>
                            <option>Name it like how you like it</option>
                            <option>Name it as lengthy as you want</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Functions, aside from letters, is only allowed to begin with?</text>
                        <options>
                            <option>Special Characters</option>
                            <option>Numbers</option>
                            <option>Underscore</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Functions, aside from underscore, is only allowed to begin with?</text>
                        <options>
                            <option>Letters</option>
                            <option>Numbers</option>
                            <option>Special Characters</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    ]]>
                    </content>
                </topic>
    </lesson>
                <lesson id="6" name="Dealing with Forms and Superglobals">
                <topic id="1">
                    <title>PHP Form Handling</title>
                    <content>
                    <![CDATA[
                          In developing a dynamic website or a web application, frequently, we have to
                    create a form to get inputs from the users, like from a Login form or maybe a Contact
                    form. Creating a form on the webpage is done by using HTML, while PHP serves as
                    a transport for some values from the webpage up to the server and processing those
                    values.

                        PHP has two superglobals, $_POST, and $_GET, for collecting form-data for
                    processing.
                    ]]>
                    </content>
                </topic>
                <topic id="2">
                    <title>THE GET and POST Methods</title>
                    <content>
                    <![CDATA[
                           Let's compose a basic HTML form and try to understand how it functions, and
                    to define what are the different attributes of the <form> tag and what are they utilized
                    for.
                    <img src="../massets/images/sample.png" alt="...">

                        In the coding above, we have used this tag <form> to create an HTML form,
                    with the text fields for Name and Email together with the submit button to submit the
                    form-data.

                        Using the action attribute, we can indicate the name of the file, which will collect
                    and handle the form-data. In the example above, we provided a PHP file named formhandler.php.

                        The method attribute indicates the means of sending the form-data, whether it
                    will be submitted thru a POST method or a GET method. In the next example, we
                    have a similar form with a method as GET
                    <img src="../massets/images/sample.png" alt="...">

                    <i>Tips and Tricks</i>
                    If you want to use the GET method, you may not declare the method attribute in a form
                    since GET is the default method of sending the form-data.
                    ]]>
                    </content>
                </topic>
                <topic id="3">
                    <title>PHP Form Handling using POST</title>
                    <content>
                    <![CDATA[
                        If we specify the form using the POST method, then the form-data is sent to the server
                    using the HTTP POST method. The figure below has the code to access the form-data in the
                    Php file specified in the action attribute of our HTML form.
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
                <topic id="4">
                    <title>PHP Form Handling using GET</title>
                    <content>
                    <![CDATA[
                         If we specify the form using the GET method, then the form-data is sent to the server using
                    the HTTP GET method. The succeeding figure has the code to access the form-data in a PHP
                    file stated in the action attribute of the HTML form. This timewe used the $_GET superglobal
                    variable.
                    Example:
                    <img src="../massets/images/sample.png" alt="...">
                    ]]>
                    </content>
                </topic>
                <topic id="5">
                    <title>GET vs. POST</title>
                    <content>
                    <![CDATA[
                         GET and POST are used for a similar purpose, but they work differently. If a user submits a
                    form, the values entered from the text fields are stored in an array and goes on to the
                    destination (PHP file) stated in the action attribute of the <form> tag. In the GET method,
                    form-data is passed as URL parameters. To be specific, all the values input within the form
                    areas by the user are sent to the action script, then passed within the URL.
                    ]]>
                    </content>
                </topic>
                <topic id="6">
                    <title>PHP File Upload</title>
                    <content>
                    <![CDATA[
                          A PHP script can be used within an HTML form to permit the users to upload the files up to
                        the server. At first, files are transferred into a temporary directory and, after that, moved to a
                        target destination by a PHP script.

                        Information on the phpinfo.php page describes the temporary directory that is used for file
                        uploads as upload_tmp_dir, and the maximum permitted size of files that can be uploaded is
                        stated as upload_max_filesize. These parameters are set into the PHP configuration file
                        php.ini

                        The method of uploading a file takes after these steps:
                        
                        • The user opens the page that contains an HTML form with content files, a
                        browse button, and a submit button.
                        • The user chooses a file to be uploaded from the local PC after clicking the
                        browse button.
                        • The full way to the chosen file shows up within the text filed at that point, and
                        the user clicks the submit button.
                        • The file uploaded is sent to the temporary directory on the server.
                        • The PHP script that was indicated as the form handler within the form's action
                        attribute checks that the file has arrived and, after that, duplicates the file into
                        an intended directory.
                        • The PHP script affirms the victory to the user.
                        As normal when creating files, it is vital for both brief and last locations to have
                        authorizations set that enables a file writing. If either is set to be read-only at that point
                        process will fail. An uploaded file might be a text file or img src file or any type of
                        document.
                    ]]>
                    </content>
                </topic>
                <topic id="7">
                    <title>Creating an Upload Form</title>
                    <content>
                    <![CDATA[
                          The following HTML code underneath creates an uploader form. This form has a method
                        attribute put to post, and the enctype attribute is putto multipart form-data.
                        
                        • $_FILES['file']['tmp_name'] - represents the uploaded file in the temporary directory on the
                        web server.
                        • $_FILES['file']['name'] - represents the actual name of the uploaded file.
                        • $_FILES['file']['size'] - represents the size in bytes of the uploaded file.
                        • $_FILES['file']['type'] - represents the MIME type of the uploaded file.
                        • $_FILES['file']['error'] - represents the error code associated with the file upload.
                    ]]>
                    </content>
                </topic>
                <topic id="8">
                    <title>PHP Cookies and Sessions</title>
                    <content>
                    <![CDATA[
                          <b>Cookies in PHP</b>
                        Cookies are text or content files put away on the client computer, and they are
                        kept to utilize tracking purposes. PHP straightforwardly supports HTTP cookies.

                        There are three steps included in distinguishing returning users:
                        • Server codes send cookies to the browser—for example, a name, an age, or an
                        identification number.
                        • The browser saves data on a local machine for future purposes.
                        • At the moment, the browser sends a request again to a web server, it sends
                        cookies data to the server, and the server utilizes the data to identify the user.
                    ]]>
                    </content>
                </topic>
                <topic id="9">
                    <title>Setting your Cookies with PHP</title>
                    <content>
                    <![CDATA[
                           PHP has what you called the setcookie(). Its function is to set a cookie and allows up to six
                        arguments and can be called before the <html> tag. For every cookie, this function has to
                        be called individually. PHP Language Structure of the setcookie() is setcookie(name, value,
                        expire, path, domain, security);
                        
                        Details of the Six Arguments:
                        ● Name − This argument sets the name of the cookie, and it is placed or saved in an
                        environment variable called HTTP_COOKIE_VARS. This argument is used for accessing
                        cookies.
                        ● Value − This argument will set the value of the named variable and the content that you
                        prefer to store.
                        ● Expiry − This implies a future time in seconds since 00:00:00 GMT on 1st Jan 1970. After this
                        time, the cookie will become inaccessible. In case this parameter is not set, then the cookie
                        will systematically expire after the Web Browser is closed.
                        ● Path − This specifies the directories in which the cookies are valid. A single forward slash
                        character allows the cookie to be valid for all directories.
                        ● Domain − This could be used to indicate the name of the domain in very large domains
                        and must have at least two periods to make it valid. All cookies will only be valid for the host
                        and domain, which created them.
                        ● Security − This argument can be set to 1 to specify that the cookie may only be sent by
                        secure transmission using HTTPS or else set to 0, which means the cookie can be sent by
                        regular HTTP.
                    ]]>
                    </content>
                </topic>
                <topic id="10">
                    <title>Sessions in PHP</title>
                    <content>
                    <![CDATA[
                           The alternative way to make data more accessible across the various pages of an entire
                        website is by using a PHP Session. A session creates a file in its temporary directory on the
                        server wherein registered session variables and their respective values are stored. During that
                        visit, all the data will be available to all pages on the website.

                        The location of the temporary file is specified by a setting within the php.ini file, which is
                        called session.save_path. Before utilizing any session variable, make sure you have finished
                        setting up this path.

                        When a session begins, the following things occur:
                        ● PHP will create first a unique identifier for that particular session that is a random string of 32
                        hexadecimal numbers like 3c7foj34c3jj973hjkop2fc937e3443.
                        ● A cookie is called PHPSESSID is systematically be sent to the user's computer to store up
                        unique sessions for identification string.
                        ● Then a file is systematically created on the server in its designated temporary directory and
                        gets the name of that unique identifier prefixed by sess_ ie
                        sess_3c7foj34c3jj973hjkop2fc937e3443.

                        Once a PHP script is needing a retrieve to value from a session variable, PHP systematically
                        takes the distinctive session identifier string from the PHPSESSID cookie and then search in its
                        temporary directory for the file getting that name. Validation will be done by relating the
                        values.
                        
                        A session will end once the user leaves the site; the server will automatically terminate the
                        session after some time. Commonly 30 minutes is the duration.
                    ]]>
                    </content>
                </topic>
                <topic id="11">
                    <title>Start a PHP Session</title>
                    <content>
                    <![CDATA[
                           A PHP session is effortlessly begun by making a call to the session_start() function. This
                        function begins checking if a session is already begun, and in case none is started at that
                        point, it begins one. It is suggested to put the call to session_start() at the start of the page.
                        
                        The session is put away in an associative array called $_SESSION[]. These variables have
                        been accessed during the lifetime of a session
                    ]]>
                    </content>
                </topic>
                <topic id="12">
                    <title>PHP Redirect</title>
                    <content>
                    <![CDATA[
                           <b>How to Make a Redirect in PHP?</b>
                            You can easily use the PHP function header() to redirect a user to another page.
                            The PHP code in the next examples will redirect the user from the page that the
                        URL http://www.example.com/another-page.php is placed. You may also apply
                        relative URLs.
                        <img src="../massets/images/sample.png" alt="...">
                            To send users from the old page going to a newly updated page permanently,
                        then mention the HTTP response code in the header() function, as illustrates in the
                        following example so that the search engines transfer "page rank" from the old page
                        to the newly updated page.
                        <img src="../massets/images/sample.png" alt="...">

                    <text>Lesson 6 Quiz</text>
                    <quiz>
                    <question>
                        <text>. Is $_POST a type of Superglobal?</text>
                        <options>
                            <option>Yes</option>
                            <option>No</option>
                            <option>Maybe</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Is $_GET a type of a Superglobal?</text>
                        <options>
                            <option>Yes</option>
                            <option>No</option>
                            <option>Maybe</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the function that is required to set a cookie?</text>
                        <options>
                            <option>SetCookie()</option>
                            <option>setcookie()</option>
                            <option>SetCookies()</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>How many arguments are allowed to be called by a set cookie?</text>
                        <options>
                            <option>25</option>
                            <option>79</option>
                            <option>6</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>The alternative way to make data more accessible across the various pages of an
entire website.</text>
                        <options>
                            <option>Session</option>
                            <option>Cookies</option>
                            <option>Redirect</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>How many minutes usually a session time out?</text>
                        <options>
                            <option>30 minutes</option>
                            <option>45 minutes</option>
                            <option>60 minutes</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What function starts a session?</text>
                        <options>
                            <option>begin_session()</option>
                            <option>start_session()</option>
                            <option>session_start()</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>How to redirect in PHP?</text>
                        <options>
                            <option>by utilizing redirect() function</option>
                            <option>by calling the header() function</option>
                            <option>by simply putting the URL of the target redirection page</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Where is the session being put away?</text>
                        <options>
                            <option>$$ESSION</option>
                            <option>$SESSION</option>
                            <option>$_SESSION[]</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the PHP language structure of setcookie()</text>
                        <options>
                            <option>setcookie(name, variable, expire, path, domain, security);</option>
                            <option>setcookie(name, value, expiration, path, domain, security);</option>
                            <option>setcookie(name, value, expire, path, domain, security);</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>How many steps does it take to distinguish returning users by the use of cookies?</text>
                        <options>
                            <option>3</option>
                            <option>5</option>
                            <option>7</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>The location of the temporary file is specified by a setting within the php.ini file, which
is called_______</text>
                        <options>
                            <option>session_save.path</option>
                            <option>session.save_path</option>
                            <option>session_save_path</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>It is needed to get input from users in PHP.</text>
                        <options>
                            <option>Forms</option>
                            <option>Paper</option>
                            <option>Interview</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What tag is used to create a form?</text>
                        <options>
                            <option><create_form></option>
                            <option><start_form></option>
                            <option><form></option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What cookie does PHP systematically takes the distinctive session identifier string?</text>
                        <options>
                            <option>PHPSESID cookie</option>
                            <option>PHPSESSID cookie</option>
                            <option>PHPSSSID cookie</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    ]]>
                    </content>
                </topic>
    </lesson>
                <lesson id="7" name="OOP in PHP">
                <topic id="1">
                    <title>OOP Concepts</title>
                    <content>
                    <![CDATA[
                            The OOP stands for Object-Oriented Programming. Object-Oriented is an approach to
                        software development that models applications around real-world objects such as cars,
                        fruits, students, and more. A class is the properties of a real-world object. An object is an
                        occurrence or instance of a class.

                        Three basic elements/components of object orientation:
                        1. Object-oriented analysis – functionality of the system
                        2. Object-oriented designing – the architecture of the system
                        3. Object-oriented programming – implementation of the application

                        Procedural programming is something about writing and composing
                        procedures or functions that perform various operations on the data. In contrast,
                        object-oriented programming focuses on creating objects that contain both the data
                        and functions.
                        
                        Object-oriented programming has some advantages compared to procedural
                        programming:
                        ● Object-oriented programming is way faster and easy to execute.
                        ● Object-oriented programming provides a smooth structure for the programs.
                        ● Object-oriented programming helps to store the PHP code DRY principle "Don't Repeat
                        Yourself" and makes the code very handy to maintain, modify, and to debug.
                        ● Object-oriented programming can make it possible to create full reusable applications
                        with less code in shorter development times.
                    ]]>
                    </content>
                </topic>
                <topic id="2">
                    <title>Class and Objects</title>
                    <content>
                    <![CDATA[
                            A class in OOP is a template or properties for objects, and an object is an instance or
                        occurrence of a class. Classes and Objects are the main elements in object-oriented
                        programming.
                    ]]>
                    </content>
                </topic>
                <topic id="3">
                    <title>Principles of OOP</title>
                    <content>
                    <![CDATA[
                            OOP has three major principles. These are encapsulation, inheritance, and polymorphism.
                    ]]>
                    </content>
                </topic>
                <topic id="4">
                    <title>Encapsulation</title>
                    <content>
                    <![CDATA[
                            Usually concerned with covering up the implementation details and, as it was
                        exposing the methods. The most reason for encapsulation is to:
                        ● Reduce the software development complexity – by covering up the implementation
                        details and as it was exposing the operations, using a class becomes very easy.
                        ● Protecting the internal state of an object – access to the class variables through methods
                        like the get and set, this makes the class more flexible and easier to maintain.
                        ● The internal implementation of the class could be changed without worrying about
                        breaking the code which utilizes the class.
                        
                        Encapsulation is a principle wherein the data is wrapped in a single unit. It is
                        used to make the data or information safe in an object from the other classes. Its main
                        function is for protection purposes.
                    ]]>
                    </content>
                </topic>
                <topic id="5">
                    <title>Inheritance</title>
                    <content>
                    <![CDATA[
                            Typically, inheritance is concerned with the relationship between classes. The relationship
                        takes the form of a parent and child. The child uses the methods characterized by the
                        parent class. The most reason for inheritance is:

                            • Re-usability – several children can acquire from the same parent. It can be
                        exceptionally valuable when we need to give common functionality, such as
                        including, updating and erasing data from the database. Re-usability – several
                        children can acquire from the same parent. It can be exceptionally valuable when
                        we need to give common functionality, such as including, updating and erasing data
                        from the database.

                            Inheritance takes place in PHP by using the extends keyword after the child
                        class's name. After the extends keyword, provide the class name of the parent class
                        (or the class to be inherited).
                        
                        In OOP, we have different types of access modifiers in a class. These modifiers
                        limit what we could access with and without inheritance.
                        1. Public – all methods and properties set to the public are accessible to the world. It means,
                        even without inheritance, simply by instantiating the class, we can access these methods
                        and properties.
                        2. Default / No Modifier – there are methods and properties set without a modifier. The level
                        of access for methods and properties without a modifier is only those classes instantiated or
                        inherited within the same package.
                        3. Protected - all methods and properties set to be protected are only accessible through
                        inheriting the class with protected methods and properties. It means only the child class
                        (inherits protected methods and properties from the parent class), and the parent class
                        (owns the protected methods and properties) may use the protected methods and
                        properties.
                        4. Private – if a method or a property is to private, only the class who owns the method or the
                        property is the only one allowed to use it.
                        ]]>
                    </content>
                </topic>
                <topic id="6">
                    <title>Polymorphism</title>
                    <content>
                    <![CDATA[
                            Polymorphism is concerned about having a single form but have different
                        implementation ways. The main reason for the polymorphism is:

                            ● Simplify keeping up applications and making it more extendable.

                            Polymorphism may be applied using the implements keyword. Files that can
                        be implemented are those that contain abstract methods, which, when implemented,
                        shall have its equivalent concrete method for implementation.

                        <text>Lesson 7 Quiz</text>
                    <quiz>
                    <question>
                        <text>Focuses on creating objects that contain both the data and functions</text>
                        <options>
                            <option>Procedural Programming</option>
                            <option>Object-Oriented-Programming</option>
                            <option>Simple Programming</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>A template in OOP</text>
                        <options>
                            <option>Group</option>
                            <option>Object</option>
                            <option>Class</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Something about writing and composing procedures</text>
                        <options>
                            <option>Procedural Programming</option>
                            <option>Object-Oriented-Programming</option>
                            <option>Simple Programming</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>How many major principles does OOP have?</text>
                        <options>
                            <option>3</option>
                            <option>7</option>
                            <option>5</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Concerned about covering up implementation details.</text>
                        <options>
                            <option>Polymorphism</option>
                            <option>Inheritance</option>
                            <option>Encapsulation</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Concerned with the relationship between classes.</text>
                        <options>
                            <option>Polymorphism</option>
                            <option>Inheritance</option>
                            <option>Encapsulation</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Concerned about having a single form but have different implementation ways.</text>
                        <options>
                            <option>Polymorphism</option>
                            <option>Inheritance</option>
                            <option>Encapsulation</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Most reason for inheritance.</text>
                        <options>
                            <option>inherits</option>
                            <option>Reducability</option>
                            <option>Re-usablity</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Focuses on the functionality of the system</text>
                        <options>
                            <option>Object-oriented analysis</option>
                            <option>Object-oriented designing</option>
                            <option>Object-oriented programming</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Focuses on the architecture of the system</text>
                        <options>
                            <option>Object-oriented analysis</option>
                            <option>Object-oriented designing</option>
                            <option>Object-oriented programming</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Focuses on the implementation of the application</text>
                        <options>
                            <option>Object-oriented analysis</option>
                            <option>Object-oriented designing</option>
                            <option>Object-oriented programming</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What does OOP stand for?</text>
                        <options>
                            <option>Object Oriented Programming</option>
                            <option>Objected-Oriented Programming</option>
                            <option>Object-Oriented-Program</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>How many types of access modifiers are there in a class?</text>
                        <options>
                            <option>3</option>
                            <option>7</option>
                            <option>4</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Simplify keeping up applications and making it more extendable</text>
                        <options>
                            <option>Polymorphism</option>
                            <option>Inheritance</option>
                            <option>Encapsulation</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text> a principle wherein the data is wrapped in a single unit. It is used to make the data or
information safe in an object from the other classes. Its main function is for protection
purposes.</text>
                        <options>
                            <option>Polymorphism</option>
                            <option>Inheritance</option>
                            <option>Encapsulation</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>


                    <text>CHAPTER ASSESSMENT</text>
                    <quiz>
                    <question>
                        <text>What is missing the following code?
                        <br><?php echo “<p> Hello World ”; ?></text>
                        <options>
                            <option>“</option>
                            <option></p></option>
                            <option>//</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is wrong in the following code?
                        <br><?php echo “<p> Hello World </p> ”; !></text>
                        <options>
                            <option>echo</option>
                            <option><p></option>
                            <option>!></option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text> What is wrong in the following code?
                        <br><?php echo “<p> Hello World </p> ” echo; ?></text>
                        <options>
                            <option>echo “<p> Hello World </p> ” echo;</option>
                            <option>!></option>
                            <option><?php</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is wrong in the following code?
                        <br><?css echo “<p> Hello World </p> ”; ?></text>
                        <options>
                            <option>echo</option>
                            <option><?css</option>
                            <option>Hello World</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the shorthand for the echo statement?</text>
                        <options>
                            <option><?=</option>
                            <option><? php echo print</option>
                            <option><?php print</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the syntax for a single line comment?</text>
                        <options>
                            <option>/* */</option>
                            <option>/? ?/</option>
                            <option>// //</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the syntax for a multiple line comment?</text>
                        <options>
                            <option>/* */</option>
                            <option>/? ?/ </option>
                            <option>// //</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the output of this For Loop Snippet?
                        <br>for ($i=1; $i<=4; $i++){echo $i . “,”;}</text>
                        <options>
                            <option>1,2,3,4</option>
                            <option>1, 2, 3, 4</option>
                            <option>1…2…3…4</option>
                        </options>
                        <answer></answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the output of this For Loop Snippet?
                        <br>for ($i=1; $i<=5; $i++){echo $i . “,”;}</text>
                        <options>
                            <option>1, 2, 3, 4, 5</option>
                            <option>5, 4, 3, 2, 1</option>
                            <option>1,2,3,4,5</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the output of this For Loop Snippet?
                        <br>Echo “The numbers are: “
                        <br>for ($i=1; $i<=5; $i++){echo $i . “,”;}</text>
                        <options>
                            <option>The number are: 1,2,3,4,5</option>
                            <option>The numbers are: 1,2,3,4,5</option>
                            <option>The numbers are 12345</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the output of this For Loop Snippet
                        <br>Echo “The numbers are: “
                        <br>for ($i=1; $i<=5; $i++){echo $i . “ - ”;}
                        </text>
                        <options>
                            <option>The numbers are: 1-2-3-4-5</option>
                            <option>The numbers are: 1 – 2 – 3 – 4 – 5 </option>
                            <option>The numbers are 1,2,3,4,5</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the output of this For Each Loop
                        <br>$colors = array{“Red”, “Blue”, “Green”};
                        <br>foreach ($colors as $value){echo $value . “ ”;}</text>
                        <options>
                            <option>Red and Blue and Green</option>
                            <option>Red, Blue, Green</option>
                            <option>Red Blue Green</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the output of this For Each Loop
                        <br>$colors = array{“Violet”, “Blue”, “Green”};
                        <br>foreach ($colors as $value){echo $value . “, ”;}</text>
                        <options>
                            <option>Violet, Blue, Green </option>
                            <option>Violet Blue Green</option>
                            <option>Green, Blue, Violet</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the output of this For Each Loop
                        <br>$colors = array{“Red”, “Blue”, “Green”};
                        <br>foreach ($colors as $value){echo $value . “ + ”;}</text>
                        <options>
                            <option>Red and Blue and Green</option>
                            <option>Red + Blue + Green</option>
                            <option>Red plus Blue plus Green</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>.What is the output of this For Each Loop
                        <br>$colors = array{“Red”, “Blue”, “Green”};
                        <br>foreach ($colors as $value){echo $value . “ and ”;}</text>
                        <options>
                            <option>Red and Blue and Green</option>
                            <option>Red + Blue + Green</option>
                            <option>Red plus Blue plus Green</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the output of this Do While Loop
                        <br>$i = 1
                        <br>do {i++ echo $i . “ “;} while (i<=3);</text>
                        <options>
                            <option>1 2 3</option>
                            <option>1, 2, 3</option>
                            <option>1+2+3</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the output of this Do While Loop
                        <br>$i = 5
                        <br>do {i++ echo $i . “, “;} while (i<=10);</text>
                        <options>
                            <option>5 6 7 8 9 10</option>
                            <option>5, 6, 7, 8, 9, 10</option>
                            <option>5+6+7+8+9+10</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the output of this Do While Loop
                        <br>$i = 1
                        <br>do {i++ echo $i . “ + “;} while (i<=5);</text>
                        <options>
                            <option>1 2 3 4 5</option>
                            <option>1, 2, 3, 4, 5</option>
                            <option>1 + 2 + 3 + 4 + 5</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the output of this Do While Loop
                        <br>$i = 1
                        <br>do {i++ echo $i . “ and “;} while (i<=3);</text>
                        <options>
                            <option>1 and 2 and 3</option>
                            <option>1, 2, 3</option>
                            <option>1+2+3</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What property is used to count Array elements?</text>
                        <options>
                            <option>implode()</option>
                            <option>count()</option>
                            <option>shuffle()</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What property is used to convert an array into a string?</text>
                        <options>
                            <option>implode()</option>
                            <option>count()</option>
                            <option>shuffle()</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What property is used to shuffle array contents?</text>
                        <options>
                            <option>implode()</option>
                            <option>count()</option>
                            <option>shuffle()</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What property is used to sort array contents?</text>
                        <options>
                            <option>implode()</option>
                            <option>count()</option>
                            <option>sort()</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>The “d” character is used in the date function to get?</text>
                        <options>
                            <option>Week of the Month</option>
                            <option>Month</option>
                            <option>Day of the Month</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>The “m” character is used in the date function to get?</text>
                        <options>
                            <option>Day</option>
                            <option>Month</option>
                            <option>Year</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>The “Y” character is used in the date function to get?</text>
                        <options>
                            <option>Day</option>
                            <option>Month</option>
                            <option>Year</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>How to redirect in PHP?</text>
                        <options>
                            <option>by utilizing redirect() function</option>
                            <option>by calling the header() function</option>
                            <option>by simply putting the URL of the target redirection page</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Where is the session being put away?</text>
                        <options>
                            <option>$$ESSION</option>
                            <option>$SESSION</option>
                            <option>$_SESSION[]</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What is the PHP language structure of setcookie()</text>
                        <options>
                            <option>setcookie(name, variable, expire, path, domain, security);</option>
                            <option>setcookie(name, value, expiration, path, domain, security);</option>
                            <option>setcookie(name, value, expire, path, domain, security);</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>What cookie does PHP systematically takes the distinctive session identifier string?</text>
                        <options>
                            <option>PHPSESID cookie</option>
                            <option>PHPSESSID cookie</option>
                            <option>PHPSSSID cookie</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Concerned about covering up implementation details.</text>
                        <options>
                            <option>Polymorphism</option>
                            <option>Inheritance</option>
                            <option>Encapsulation</option>
                        </options>
                        <answer>3</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Concerned with the relationship between classes.</text>
                        <options>
                            <option>Polymorphism</option>
                            <option>Inheritance</option>
                            <option>Encapsulation</option>
                        </options>
                        <answer>2</answer>
                    </question>
                    </quiz>
                    <quiz>
                    <question>
                        <text>Concerned about having a single form but have different implementation ways</text>
                        <options>
                            <option>Polymorphism</option>
                            <option>Inheritance</option>
                            <option>Encapsulation</option>
                        </options>
                        <answer>1</answer>
                    </question>
                    </quiz>
                        ]]>
                    </content>
                </topic>
    </lesson>
    </lessons>